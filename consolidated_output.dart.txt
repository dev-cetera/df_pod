// Consolidated Imports
import 'dart:io';
import 'package:flutter/widgets.dart';
import 'dart:async' show Timer;
import 'package:df_log/df_log.dart' show Log;
import 'package:df_safer_dart/df_safer_dart.dart';
import 'package:df_debouncer/df_debouncer.dart' show CacheManager;
import 'package:flutter/foundation.dart' show ValueListenable;
import 'package:flutter/foundation.dart';
import 'dart:async';
import 'package:df_type/df_type.dart';
import 'package:flutter/widgets.dart' show WidgetsBinding;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:df_safer_dart/df_safer_dart.dart' show Async;
import 'dart:convert';
import 'package:meta/meta.dart' show protected;
import 'package:df_cleanup/df_cleanup.dart' show DisposeMixin, WillDisposeMixin;
import 'dart:ui' show VoidCallback;
import 'package:meta/meta.dart';

// Source: ./dart_consolidate.dart
// import 'dart:io';

void main(List<String> arguments) async {
  final sourceDirPath = arguments.firstOrNull ?? '.';
  final sourceDir = Directory(sourceDirPath);

  if (!await sourceDir.exists()) {
    print('Directory does not exist: $sourceDirPath');
    return;
  }

  final outputFile = File('consolidated_output.dart.txt');
  final sink = outputFile.openWrite();
  final imports = <String>{}; // Set to store unique non-local imports

  // Process all files and collect imports
  await _processDirectory(sourceDir, sink, imports);

  // Write imports at the top
  sink.writeln('// Consolidated Imports');
  for (var import in imports) {
    sink.writeln(import);
  }
  sink.writeln();

  // Reprocess files to write their content with commented imports and part directives
  await _writeFileContents(sourceDir, sink);

  await sink.flush();
  await sink.close();
  print('Consolidation complete. Output written to ${outputFile.path}');
}

Future<void> _processDirectory(Directory dir, IOSink sink, Set<String> imports) async {
  await for (final entity in dir.list(recursive: true, followLinks: false)) {
    if (entity is File && entity.path.endsWith('.dart')) {
      await _collectImports(entity, imports);
    }
  }
}

Future<void> _collectImports(File file, Set<String> imports) async {
  final lines = await file.readAsLines();
  for (var line in lines) {
    final trimmedLine = line.trim();
    if (trimmedLine.startsWith('import ')) {
      if (trimmedLine.startsWith("import 'package:") || trimmedLine.startsWith("import 'dart:")) {
        imports.add(line); // Store non-local imports
      }
    }
  }
}

Future<void> _writeFileContents(Directory dir, IOSink sink) async {
  await for (final entity in dir.list(recursive: true, followLinks: false)) {
    if (entity is File && entity.path.endsWith('.dart')) {
      await _processFile(entity, sink);
    }
  }
}

Future<void> _processFile(File file, IOSink sink) async {
  // Write comment with original file path
  sink.writeln('// Source: ${file.path}');

  final lines = await file.readAsLines();
  for (var line in lines) {
    final trimmedLine = line.trim();
    // Comment out import statements and part directives
    if (trimmedLine.startsWith('import ') ||
        trimmedLine.startsWith('part ') ||
        trimmedLine.startsWith('part of ')) {
      sink.writeln('// $line');
    } else {
      sink.writeln(line);
    }
  }
  // Add a newline after each file's content
  sink.writeln();
}

// Source: ./.github/scripts/update_changelog.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:io';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

void main(List<String> args) {
  final version = args.isNotEmpty ? args[0] : '0.1.0';
  final comitMesssage = args.length > 1 ? args[1].replaceFirst('+', '') : '';
  final changelogPath = 'CHANGELOG.md';
  final file = File(changelogPath);
  if (!file.existsSync()) {
    print('$changelogPath does not exist.');
    exit(1);
  }
  var contents = file.readAsStringSync();
  contents = contents.replaceAll('# Changelog', '').trim();
  final sections = extractSections(contents);
  final versionExist = sections.where((e) => e.version == version).isNotEmpty;
  if (versionExist) {
    sections.where((e) => e.version == version).forEach((e) {
      e.addUpdate(comitMesssage);
    });
  } else {
    sections.add(
      _VersionSection(
        version: version,
        releasedAt: DateTime.now().toUtc(),
        updates: {comitMesssage},
      ),
    );
  }
  contents = '# Changelog\n\n${(sections.toList()..sort((a, b) {
      return compareVersions(b.version, a.version);
    })).map((e) => e.toString()).join('\n')}';

  file.writeAsStringSync(contents);
  print('Changelog updated with version $version.');
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

Set<_VersionSection> extractSections(String contents) {
  final headerPattern = RegExp(r'## \[\d+\.\d+\.\d+(\+\d+)?\]');
  final allVersionMatches = headerPattern.allMatches(contents).toList();
  final results = <_VersionSection>{};
  for (var i = 0; i < allVersionMatches.length; i++) {
    final start = allVersionMatches[i].end;
    final end = i + 1 < allVersionMatches.length ? allVersionMatches[i + 1].start : contents.length;
    final sectionContents = contents.substring(start, end).trim();
    final lines = sectionContents.split('\n').where((line) => line.isNotEmpty).toList();
    final version =
        allVersionMatches[i].group(0)!.substring(4, allVersionMatches[i].group(0)!.length - 1);
    var releasedAt = DateTime.now().toUtc();
    final updates = <String>{};
    final old = lines
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty)
        .map((e) => e.startsWith('-') ? e.substring(1) : e)
        .map((e) => e.trim())
        .where((e) => e.isNotEmpty);
    for (var line in old) {
      if (line.contains('Released @')) {
        releasedAt = parseReleaseDate(line);
      } else {
        updates.add(line);
      }
    }
    results.add(
      _VersionSection(
        version: version,
        releasedAt: releasedAt,
        updates: updates,
      ),
    );
  }

  return results;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class _VersionSection {
  //
  //
  //

  String version;
  DateTime releasedAt;
  Set<String> updates;

  //
  //
  //

  _VersionSection({
    required this.version,
    required this.releasedAt,
    Set<String>? updates,
  }) : this.updates = updates ?? {};

  //
  //
  //

  void addUpdate(String update) {
    updates.add(update);
    releasedAt = DateTime.now().toUtc();
  }

  //
  //
  //

  @override
  String toString() {
    final updatesString = updates.map((update) => '- $update').join('\n');
    return '## [$version]\n\n- Released @ ${releasedAt.month}/${releasedAt.year} (UTC)\n$updatesString\n';
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

int compareVersions(String version1, String version2) {
  List<int> parseVersion(String version) {
    // Split by the '+' first to handle the build number
    final parts = version.split('+');
    final versionParts = parts[0].split('.').map(int.tryParse).map((e) => e ?? 0).toList();
    // Add the build number as the last part (if it exists)
    if (parts.length > 1) {
      versionParts.add(int.tryParse(parts[1]) ?? 0);
    }
    return versionParts;
  }

  final v1 = parseVersion(version1);
  final v2 = parseVersion(version2);
  final maxLength = v1.length > v2.length ? v1.length : v2.length;
  for (var i = 0; i < maxLength; i++) {
    final part1 = i < v1.length ? v1[i] : 0;
    final part2 = i < v2.length ? v2[i] : 0;
    if (part1 > part2) return 1;
    if (part1 < part2) return -1;
  }
  return 0;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

DateTime parseReleaseDate(String line) {
  if (line.contains('Released @')) {
    final temp = line.split('Released @').last.trim().replaceAll(' (UTC)', '');
    final parts = temp.split('/');
    if (parts.length == 2) {
      final month = int.tryParse(parts[0]) ?? 1;
      final year = int.tryParse(parts[1]) ?? DateTime.now().year;
      return DateTime.utc(year, month);
    }
  }

  return DateTime.now().toUtc();
}

// Source: ./lib/df_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

/// A package offering tools to manage app state using ValueListenable objects called Pods.
library;

export 'dart:async';

export 'package:flutter/foundation.dart' show ValueListenable;
export 'package:df_log/df_log.dart';
export 'package:df_safer_dart/df_safer_dart.dart';

export 'src/_src.g.dart';

// Source: ./lib/src/builders/builder_snapshot.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:flutter/widgets.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class BuilderSnapshot {
  final Widget? child;
  const BuilderSnapshot({required this.child});
}

// Source: ./lib/src/builders/pod_list_builder.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:async' show Timer;
// import 'package:df_log/df_log.dart' show Log;
// import 'package:df_safer_dart/df_safer_dart.dart';
// import 'package:df_debouncer/df_debouncer.dart' show CacheManager;
// import 'package:flutter/foundation.dart' show ValueListenable;
// import 'package:flutter/widgets.dart';

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class PodListBuilder<T extends Object> extends StatelessWidget {
  //
  //
  //

  final Iterable<Resolvable<ValueListenable<T>>> podList;
  final TOnOptionListBuilder<T, PodListBuilderOptionSnapshot<T>> builder;
  final void Function(Iterable<ValueListenable<T>> podList)? onDispose;
  final Duration? debounceDuration;
  final Duration? cacheDuration;
  final Iterable<T>? fallback;
  final Widget? child;

  @protected
  static final cacheManager = CacheManager<Iterable<Object>>();

  //
  //
  //

  const PodListBuilder({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.debounceDuration,
    this.cacheDuration = Duration.zero,
    this.child,
    this.fallback,
  });

  /// Constructs a [PodListBuilder] with a zero debounce duration.
  @visibleForTesting
  const PodListBuilder.immediate({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
    this.fallback,
  }) : debounceDuration = Duration.zero;

  /// Constructs a [PodListBuilder] with a short debounce duration of 100ms.
  const PodListBuilder.short({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
    this.fallback,
  }) : debounceDuration = const Duration(milliseconds: 100);

  /// Constructs a [PodListBuilder] with a long debounce duration of 500ms.
  const PodListBuilder.moderate({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
    this.fallback,
  }) : debounceDuration = const Duration(milliseconds: 500);

  /// Constructs a [PodListBuilder] with a long debounce duration of 1s.
  const PodListBuilder.long({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
    this.fallback,
  }) : debounceDuration = const Duration(seconds: 1);

  /// Constructs a [PodListBuilder] with a long debounce duration of 3s.
  const PodListBuilder.extraLong({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
    this.fallback,
  }) : debounceDuration = const Duration(seconds: 3);

  //
  //
  //

  @override
  Widget build(BuildContext context) {
    final isSync = podList.every((e) => e.isSync());
    if (isSync) {
      final podList1 = podList.map((e) => e.unwrapSync().value);
      return SyncPodListBuilder(
        key: key,
        podList: podList1,
        builder: (context, snapshot) {
          return builder(
            context,
            PodListBuilderOptionSnapshot(
              podList: Some(podList1),
              value: Some(snapshot.value),
              child: child,
            ),
          );
        },
        onDispose: onDispose,
        cacheDuration: cacheDuration,
        debounceDuration: debounceDuration,
        child: child,
      );
    } else {
      final podList2 = podList.map((e) => e.asAsync().value);
      return FutureBuilder(
        future: () async {
          return await Future.wait(
            podList2.map(
              (e) => () async {
                return e;
              }(),
            ),
          );
        }(),
        builder: (context, snapshot) {
          final podList = snapshot.data;
          if (snapshot.hasData && podList != null) {
            return SyncPodListBuilder(
              key: key,
              podList: podList,
              builder: (context, snapshot) {
                return builder(
                  context,
                  PodListBuilderOptionSnapshot(
                    podList: Some(podList),
                    value: Some(snapshot.value),
                    child: child,
                  ),
                );
              },
              onDispose: onDispose,
              cacheDuration: cacheDuration,
              debounceDuration: debounceDuration,
              child: child,
            );
          } else {
            final snapshot = PodListBuilderOptionSnapshot<T>(
              podList: const None(),
              value: const None(),
              child: child,
            );
            final result = builder(context, snapshot);
            return result;
          }
        },
      );
    }
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SyncPodListBuilder<T extends Object> extends StatefulWidget {
  //
  //
  //

  final Iterable<Result<ValueListenable<T>>> podList;
  final TOnValueListBuilder<T, PodListBuilderValueSnapshot<T>> builder;
  final void Function(Iterable<ValueListenable<T>> podList)? onDispose;
  final Duration? debounceDuration;
  final Duration? cacheDuration;
  final Widget? child;

  //
  //
  //

  const SyncPodListBuilder({
    super.key,
    required this.podList,
    required this.builder,
    this.onDispose,
    this.debounceDuration,
    required this.cacheDuration,
    this.child,
  });

  //
  //
  //

  @override
  State<SyncPodListBuilder<T>> createState() => SyncPodListBuilderState();
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SyncPodListBuilderState<T extends Object> extends State<SyncPodListBuilder<T>> {
  //
  //
  //

  late final Widget? _staticChild;
  late Iterable<Result<T>> _valueList;

  @override
  void initState() {
    super.initState();
    _staticChild = widget.child;
    _setValue();
    _cacheValue();
    _addListenerToPods(widget.podList);
  }

  @override
  void didUpdateWidget(SyncPodListBuilder<T> oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (!_arePodListsEqual(widget.podList, oldWidget.podList)) {
      _removeListenerFromPods(oldWidget.podList);
      _setValue();
      _cacheValue();
      _addListenerToPods(widget.podList);
    }
  }

  bool _arePodListsEqual(
    Iterable<Result<ValueListenable<T>>> a,
    Iterable<Result<ValueListenable<T>>> b,
  ) {
    if (identical(a, b)) return true;
    final aIter = a.iterator;
    final bIter = b.iterator;
    while (aIter.moveNext()) {
      if (!bIter.moveNext() || aIter.current != bIter.current) return false;
    }
    return !bIter.moveNext();
  }

  void _setValue() {
    final key = widget.key;
    if (key != null) {
      final cachedValue = PodListBuilder.cacheManager.get(key.toString()) as Iterable<Result<T>>?;
      if (cachedValue != null) {
        _valueList = cachedValue;
        return;
      }
    }
    _valueList = widget.podList.map((e) => e.map((e) => e.value));
  }

  void _cacheValue() {
    final key = widget.key;
    if (key == null) {
      return;
    }
    PodListBuilder.cacheManager.cache(
      key.toString(),
      widget.podList.map((e) => e.map((e) => e.value)),
      cacheDuration: widget.cacheDuration,
    );
  }

  void _addListenerToPods(Iterable<Result<ValueListenable<T>>> pods) {
    for (final pod in pods) {
      if (pod.isErr()) continue;
      pod.unwrap().addListener(_valueChanged);
    }
  }

  void _removeListenerFromPods(Iterable<Result<ValueListenable<T>>> pods) {
    for (final pod in pods) {
      if (pod.isErr()) continue;
      pod.unwrap().removeListener(_valueChanged);
    }
  }

  Timer? _debounceTimer;

  // ignore: prefer_final_fields
  late void Function() _valueChanged = widget.debounceDuration != null
      ? () {
          _debounceTimer?.cancel();
          _debounceTimer = Timer(widget.debounceDuration!, () {
            __valueChanged();
          });
        }
      : __valueChanged;

  void __valueChanged() {
    if (mounted) {
      setState(() {
        _setValue();
        _cacheValue();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return widget.builder(
      context,
      PodListBuilderValueSnapshot(
        podList: widget.podList,
        value: _valueList,
        child: _staticChild,
      ),
    );
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    final temp = <ValueListenable<T>>[];
    for (final pod in widget.podList) {
      if (pod.isErr()) {
        Log.err('Tried to dispose Err<ValueListenable<T>>!', {#df_pod});
        continue;
      }
      pod.unwrap().removeListener(_valueChanged);
      temp.add(pod.unwrap());
    }
    widget.onDispose?.call(temp);
    super.dispose();
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class PodListBuilderValueSnapshot<T extends Object> extends OnValueListSnapshot<T> {
  final Iterable<Result<ValueListenable<T>>> podList;

  const PodListBuilderValueSnapshot({
    required this.podList,
    required super.value,
    required super.child,
  });
}

final class PodListBuilderOptionSnapshot<T extends Object> extends OnOptionListSnapshot<T> {
  final Option<Iterable<Result<ValueListenable<T>>>> podList;

  const PodListBuilderOptionSnapshot({
    required this.podList,
    required super.value,
    required super.child,
  });
}

typedef TOnValueListBuilder<T extends Object, S extends OnValueListSnapshot<T>> = Widget Function(
  BuildContext context,
  S snapshot,
);

class OnValueListSnapshot<T extends Object> extends BuilderSnapshot {
  final Iterable<Result<T>> value;
  const OnValueListSnapshot({required this.value, required super.child});
}

typedef TOnOptionListBuilder<T extends Object, S extends OnOptionListSnapshot<T>> = Widget Function(
  BuildContext context,
  S snapshot,
);

class OnOptionListSnapshot<T extends Object> extends BuilderSnapshot {
  final Option<Iterable<Result<T>>> value;
  const OnOptionListSnapshot({required this.value, required super.child});
}

// Source: ./lib/src/builders/polling_pod_builder.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:async' show Timer;
// import 'package:df_safer_dart/df_safer_dart.dart';
// import 'package:df_debouncer/df_debouncer.dart' show CacheManager;
// import 'package:flutter/foundation.dart' show ValueListenable;
// import 'package:flutter/widgets.dart';

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class PollingPodBuilder<T extends Object> extends StatefulWidget {
  //
  //
  //

  final Option<Resolvable<ValueListenable<T>>> Function() podPoller;
  final TOnOptionBuilder<T, PodBuilderOptionSnapshot<T>> builder;
  final void Function(ValueListenable<T>? pod)? onDispose;
  final Duration? debounceDuration;
  final Duration? cacheDuration;
  final Duration? interval;
  final Widget? child;

  @protected
  static final cacheManager = CacheManager<Object>();

  //
  //
  //

  const PollingPodBuilder({
    super.key,
    required this.podPoller,
    required this.builder,
    this.onDispose,
    this.debounceDuration,
    this.cacheDuration = Duration.zero,
    this.interval = Duration.zero,
    this.child,
  });

  /// Constructs a [PollingPodBuilder] with zero interval and zero debounce
  /// duration
  @visibleForTesting
  const PollingPodBuilder.immediate({
    super.key,
    required this.podPoller,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  })  : interval = Duration.zero,
        debounceDuration = Duration.zero;

  /// Constructs a [PollingPodBuilder] with a short polling interval of 100ms
  /// and debounce duration of 100ms.
  const PollingPodBuilder.short({
    super.key,
    required this.podPoller,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  })  : interval = const Duration(milliseconds: 100),
        debounceDuration = const Duration(milliseconds: 100);

  /// Constructs a [PollingPodBuilder] with a long polling interval of 500ms
  /// and debounce duration of 500ms.
  const PollingPodBuilder.moderate({
    super.key,
    required this.podPoller,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  })  : interval = const Duration(milliseconds: 500),
        debounceDuration = const Duration(milliseconds: 500);

  /// Constructs a [PollingPodBuilder] with a long polling interval of 1s and
  /// debounce duration of 1s.
  const PollingPodBuilder.long({
    super.key,
    required this.podPoller,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  })  : interval = const Duration(seconds: 1),
        debounceDuration = const Duration(seconds: 1);

  /// Constructs a [PollingPodBuilder] with a long polling interval of 3s
  /// and debounce duration of 3s.
  const PollingPodBuilder.extraLong({
    super.key,
    required this.podPoller,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  })  : interval = const Duration(seconds: 3),
        debounceDuration = const Duration(seconds: 13);

  //
  //
  //

  @override
  State<PollingPodBuilder<T>> createState() => _PollingPodBuilderState<T>();
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class _PollingPodBuilderState<T extends Object> extends State<PollingPodBuilder<T>> {
  //
  //
  //

  late final Widget? _staticChild = widget.child;
  Option<Resolvable<ValueListenable<T>>> _currentPod = const None();
  Timer? _pollingTimer;

  @override
  void initState() {
    super.initState();
    _maybeStartPolling();
  }

  @override
  void didUpdateWidget(PollingPodBuilder<T> oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.podPoller != widget.podPoller || oldWidget.interval != widget.interval) {
      _maybeStartPolling();
    }
  }

  void _maybeStartPolling() {
    if (!_check()) {
      _startPolling();
    }
  }

  void _startPolling() {
    _pollingTimer?.cancel();
    _pollingTimer = Timer.periodic(widget.interval!, (_) {
      if (_check()) {
        _pollingTimer?.cancel();
      }
    });
  }

  bool _check() {
    _currentPod = widget.podPoller();
    if (_currentPod.isSome()) {
      if (mounted) {
        setState(() {});
        return true;
      }
    }
    return false;
  }

  @override
  Widget build(BuildContext context) {
    if (_currentPod.isSome()) {
      return PodBuilder<T>(
        key: widget.key,
        pod: _currentPod.unwrap(),
        builder: widget.builder,
        onDispose: widget.onDispose,
        debounceDuration: widget.debounceDuration,
        cacheDuration: widget.cacheDuration,
        child: _staticChild,
      );
    } else {
      final result = widget.builder(
        context,
        PodBuilderOptionSnapshot<T>(
          pod: const None(),
          value: Option.fromNullable(
            PollingPodBuilder.cacheManager.get(widget.key?.toString()) as Result<T>?,
          ),
          child: _staticChild,
        ),
      );
      return result;
    }
  }

  @override
  void dispose() {
    _pollingTimer?.cancel();
    super.dispose();
  }
}

// Source: ./lib/src/builders/pod_builder.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:async' show Timer;
// import 'package:df_log/df_log.dart' show Log;
// import 'package:df_safer_dart/df_safer_dart.dart';
// import 'package:df_debouncer/df_debouncer.dart' show CacheManager;
// import 'package:flutter/foundation.dart' show ValueListenable;
// import 'package:flutter/widgets.dart';

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class PodBuilder<T extends Object> extends StatelessWidget {
  //
  //
  //

  final Resolvable<ValueListenable<T>> pod;
  final TOnOptionBuilder<T, PodBuilderOptionSnapshot<T>> builder;
  final void Function(ValueListenable<T> pod)? onDispose;
  final Duration? debounceDuration;
  final Duration? cacheDuration;
  final Widget? child;

  @protected
  static final cacheManager = CacheManager<Object>();

  //
  //
  //

  const PodBuilder({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.debounceDuration,
    this.cacheDuration = Duration.zero,
    this.child,
  });

  // Constructs a [PodBuilder] with a zero debounce duration.
  @visibleForTesting
  const PodBuilder.immediate({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  }) : debounceDuration = Duration.zero;

  /// Constructs a [PodBuilder] with a short debounce duration of 100ms.
  const PodBuilder.short({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  }) : debounceDuration = const Duration(milliseconds: 100);

  /// Constructs a [PodBuilder] with a long debounce duration of 500ms.
  const PodBuilder.moderate({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  }) : debounceDuration = const Duration(milliseconds: 500);

  /// Constructs a [PodBuilder] with a long debounce duration of 1s.
  const PodBuilder.long({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  }) : debounceDuration = const Duration(seconds: 1);

  /// Constructs a [PodBuilder] with a long debounce duration of 3s.
  const PodBuilder.extraLong({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.cacheDuration = Duration.zero,
    this.child,
  }) : debounceDuration = const Duration(seconds: 3);

  //
  //
  //

  @override
  Widget build(BuildContext context) {
    if (pod.isSync()) {
      return SyncPodBuilder(
        key: key,
        pod: pod.unwrapSync().value,
        builder: (context, snapshot) {
          return builder(
            context,
            PodBuilderOptionSnapshot(
              pod: Some(snapshot.pod),
              value: Some(snapshot.value),
              child: child,
            ),
          );
        },
        onDispose: onDispose,
        cacheDuration: cacheDuration,
        debounceDuration: debounceDuration,
        child: child,
      );
    } else {
      return FutureBuilder(
        future: pod.unwrapAsync().value,
        builder: (context, snapshot) {
          final pod = snapshot.data;
          if (snapshot.hasData && pod != null) {
            return SyncPodBuilder(
              key: key,
              pod: pod,
              builder: (context, snapshot) {
                return builder(
                  context,
                  PodBuilderOptionSnapshot(
                    pod: Some(snapshot.pod),
                    value: Some(snapshot.value),
                    child: child,
                  ),
                );
              },
              onDispose: onDispose,
              cacheDuration: cacheDuration,
              debounceDuration: debounceDuration,
              child: child,
            );
          } else {
            return builder(
              context,
              PodBuilderOptionSnapshot(
                pod: Option.fromNullable(pod),
                value: Option.fromNullable(
                  cacheManager.get(key?.toString()) as Result<T>?,
                ),
                child: child,
              ),
            );
          }
        },
      );
    }
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SyncPodBuilder<T extends Object> extends StatefulWidget {
  //
  //
  //

  final Result<ValueListenable<T>> pod;
  final TOnValueBuilder<T, PodBuilderValueSnapshot<T>> builder;
  final void Function(ValueListenable<T> pod)? onDispose;
  final Duration? debounceDuration;
  final Duration? cacheDuration;
  final Widget? child;

  //
  //
  //

  const SyncPodBuilder({
    super.key,
    required this.pod,
    required this.builder,
    this.onDispose,
    this.debounceDuration,
    required this.cacheDuration,
    this.child,
  });

  //
  //
  //

  @override
  State<SyncPodBuilder<T>> createState() => SyncPodBuilderState<T>();
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SyncPodBuilderState<T extends Object> extends State<SyncPodBuilder<T>> {
  //
  //
  //

  late final Widget? _staticChild;
  late Result<T> _value;

  @override
  void initState() {
    super.initState();
    _staticChild = widget.child;
    _setValue();
    _cacheValue();
    widget.pod.ifOk((e) => e.unwrap().addListener(_valueChanged));
  }

  @override
  void didUpdateWidget(SyncPodBuilder<T> oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.pod != widget.pod) {
      oldWidget.pod.ifOk((e) => e.unwrap().removeListener(_valueChanged));
      _setValue();
      _cacheValue();
      widget.pod.ifOk((e) => e.unwrap().addListener(_valueChanged));
    }
  }

  void _setValue() {
    final key = widget.key;
    if (key != null) {
      final cachedValue = PodBuilder.cacheManager.get(key.toString()) as Result<T>?;
      if (cachedValue != null) {
        _value = cachedValue;
        return;
      }
    }

    _value = widget.pod.map((e) => e.value);
  }

  void _cacheValue() {
    final key = widget.key;
    if (key == null) {
      return;
    }
    PodBuilder.cacheManager.cache(
      key.toString(),
      _value,
      cacheDuration: widget.cacheDuration,
    );
  }

  Timer? _debounceTimer;

  // ignore: prefer_final_fields
  late void Function() _valueChanged = widget.debounceDuration != null
      ? () {
          _debounceTimer?.cancel();
          _debounceTimer = Timer(widget.debounceDuration!, () {
            __valueChanged();
          });
        }
      : __valueChanged;

  void __valueChanged() {
    if (mounted) {
      setState(() {
        _setValue();
        _cacheValue();
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return widget.builder(
      context,
      PodBuilderValueSnapshot(
        pod: widget.pod,
        value: _value,
        child: _staticChild,
      ),
    );
  }

  @override
  void dispose() {
    _debounceTimer?.cancel();
    if (widget.pod.isOk()) {
      widget.pod.unwrap().removeListener(_valueChanged);
      widget.onDispose?.call(widget.pod.unwrap());
    } else {
      Log.err('Tried to dispose Err<ValueListenable<T>>!', {#df_pod});
    }
    super.dispose();
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class PodBuilderValueSnapshot<T extends Object> extends OnValueSnapshot<T> {
  final Result<ValueListenable<T>> pod;

  const PodBuilderValueSnapshot({
    required this.pod,
    required super.value,
    required super.child,
  });
}

final class PodBuilderOptionSnapshot<T extends Object> extends OnOptionSnapshot<T> {
  final Option<Result<ValueListenable<T>>> pod;

  const PodBuilderOptionSnapshot({
    required this.pod,
    required super.value,
    required super.child,
  });
}

typedef TOnValueBuilder<T extends Object, S extends OnValueSnapshot<T>> = Widget Function(
  BuildContext context,
  S snapshot,
);

class OnValueSnapshot<T extends Object> extends BuilderSnapshot {
  final Result<T> value;
  const OnValueSnapshot({required this.value, required super.child});
}

typedef TOnOptionBuilder<T extends Object, S extends OnOptionSnapshot<T>> = Widget Function(
  BuildContext context,
  S snapshot,
);

class OnOptionSnapshot<T extends Object> extends BuilderSnapshot {
  final Option<Result<T>> value;
  const OnOptionSnapshot({required this.value, required super.child});
}

// Source: ./lib/src/utils/value_listenable_x.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:flutter/foundation.dart' show ValueListenable;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

extension ValueListenableX<T extends Object> on ValueListenable<T> {
  /// Returns the Pod as a [ValueListenable].
  ValueListenable<T> asValueListenable() {
    return this;
  }

  /// Casts the [ValueListenable] to a [DisposablePod].
  ///
  /// Throws a [TypeError] if the cast cannot be performed.
  DisposablePod<T> asDisposablePod() {
    return this as DisposablePod<T>;
  }

  /// Casts the [ValueListenable] to a [RootPod].
  ///
  /// Throws a [TypeError] if the cast cannot be performed.
  RootPod<T> asRootPod() {
    return this as RootPod<T>;
  }

  /// Casts the [ValueListenable] to a [ChildPod].
  ///
  /// Throws a [TypeError] if the cast cannot be performed.
  ChildPod<TParent, T> asChildPod<TParent extends Object>() {
    return this as ChildPod<TParent, T>;
  }

  /// Casts the [ValueListenable] to a [SharedPod].
  ///
  /// Throws a [TypeError] if the cast cannot be performed.
  SharedPod<T, TRawValue> asSharedPod<TRawValue extends Object>() {
    return this as SharedPod<T, TRawValue>;
  }

  /// Casts the [ValueListenable] to a [GenericPod].
  ///
  /// Throws a [TypeError] if the cast cannot be performed.
  GenericPod<T> asGenericPod() {
    return this as GenericPod<T>;
  }

  /// Casts the [ValueListenable] to a [ProtectedPod].
  ///
  /// Throws a [TypeError] if the cast cannot be performed.
  ProtectedPod<T> asProtectedPod() {
    return this as ProtectedPod<T>;
  }
}

// Source: ./lib/src/utils/_pod_finalizer_wrapper.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:flutter/foundation.dart';

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

@visibleForTesting
final class PodFinalizerWrapper<T extends Object> {
  final WeakReference<PodNotifier<T>> _pod;

  static final _finalizer = Finalizer<DisposablePod<dynamic>?>(
    (pod) => pod?.dispose(),
  );

  PodFinalizerWrapper(PodNotifier<T> pod) : _pod = WeakReference(pod) {
    _finalizer.attach(this, _pod.target);
  }
}

// Source: ./lib/src/utils/weak_change_notifier.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_log/df_log.dart' show Log;
// import 'package:flutter/foundation.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class that can be extended or mixed in that provides a change notification
/// API using [VoidCallback] for notifications. It is a modified version of
/// Flutter's [ChangeNotifier] that uses [WeakReference] for its listeners.
///
/// This prevents the notifier from holding a strong reference to its listeners,
/// a common source of memory leaks if `removeListener` is not called. Listeners
/// are automatically marked for removal when they are garbage collected.
///
/// It is O(1) for adding listeners and O(N) for removing listeners and dispatching
/// notifications (where N is the number of listeners).
mixin class WeakChangeNotifier implements Listenable {
  int _count = 0;
  List<WeakReference<VoidCallback>?> _listeners = _emptyListeners;
  static final _emptyListeners = List<WeakReference<VoidCallback>?>.filled(0, null);

  int _notificationCallStackDepth = 0;
  int _reentrantlyRemovedListeners = 0;
  bool _isDisposed = false;

  // --- Debugging ---
  static bool printGarbageCollectionStatus = false;
  List<Finalizer<VoidCallback>>? _debugFinalizers;
  bool _debugFinalizersAttached = false;

  /// Whether any listeners are currently registered.
  ///
  /// Clients should not depend on this value for their behavior, because having
  /// one listener's logic change when another listener happens to start or stop
  /// listening will lead to extremely hard-to-track bugs.
  ///
  /// This method returns false if [dispose] has been called.
  @protected
  bool get hasListeners => _count > 0;

  /// Registers a listener that will be called only once when the object
  /// notifies its listeners. After the listener is called, it is automatically
  /// removed.
  void addSingleExecutionListener(VoidCallback listener) {
    // This is a special case that requires a strong reference to the temporary
    // wrapper closure. We hold it until it's called.
    late final VoidCallback tempListener;
    tempListener = () {
      try {
        listener();
      } finally {
        removeListener(tempListener);
      }
    };
    addStrongRefListener(strongRefListener: tempListener);
  }

  /// Register a closure to be called when the object notifies its listeners.
  ///
  /// The [strongRefListener] MUST be held by a strong reference by the object
  /// that adds it. If the listener is an anonymous function or a reference to a
  /// function that goes out of scope, it will be garbage collected and
  /// automatically removed without notice.
  ///
  /// This method must not be called after [dispose] has been called.
  ///
  /// ### Example of Correct Usage:
  ///
  /// ```dart
  /// class MyWidgetState extends State<MyWidget> {
  ///   // Assign the listener to a field to maintain a strong reference.
  ///   late final VoidCallback _myListener = () => print('Notified!');
  ///
  ///   @override
  ///   void initState() {
  ///     super.initState();
  ///     myNotifier.addStrongRefListener(strongRefListener: _myListener);
  ///   }
  ///
  ///   @override
  ///   void dispose() {
  ///     myNotifier.removeListener(_myListener);
  ///     super.dispose();
  ///   }
  /// }
  /// ```
  void addStrongRefListener({required VoidCallback strongRefListener}) {
    assert(!_isDisposed, 'A $runtimeType was used after being disposed.');

    // Per the Listenable contract, addListener should be callable with the same
    // listener multiple times. We do not de-duplicate.

    if (_count == _listeners.length) {
      _growListenersList();
    }
    _listeners[_count++] = WeakReference(strongRefListener);
    _attachFinalizer(strongRefListener);
  }

  /// Implements the [Listenable] interface.
  ///
  /// Use [addStrongRefListener] instead, as this method's name can be misleading
  /// about the weak reference behavior.
  @protected
  @Deprecated('Use addStrongRefListener to make the contract explicit.')
  @override
  void addListener(VoidCallback listener) {
    addStrongRefListener(strongRefListener: listener);
  }

  /// Remove a previously registered closure from the list of closures that are
  /// notified when the object changes.
  ///
  /// If the given listener is not registered, the call is ignored. This method
  /// is allowed to be called on disposed instances for usability reasons.
  @override
  void removeListener(VoidCallback listener) {
    if (_isDisposed) return;

    for (var i = 0; i < _count; i++) {
      final listenerRef = _listeners[i];
      if (listenerRef?.target == listener) {
        if (_notificationCallStackDepth > 0) {
          // If we are in the middle of a notification, we don't resize the list.
          // We just set the listener to null. It will be cleaned up later.
          _listeners[i] = null;
          _reentrantlyRemovedListeners++;
        } else {
          // When we are outside the notifyListeners iterations, we can
          // effectively shrink the list.
          _removeAt(i);
        }
        break;
      }
    }
  }

  /// Discards any resources used by the object. After this is called, the
  /// object is not in a usable state and should be discarded.
  ///
  /// This method should only be called by the object's owner.
  @mustCallSuper
  void dispose() {
    assert(!_isDisposed, 'This $runtimeType has already been disposed.');
    assert(
      _notificationCallStackDepth == 0,
      'The "dispose()" method on $this was called during a call to "notifyListeners()".',
    );
    _isDisposed = true;
    _listeners = _emptyListeners;
    _count = 0;
    _detachAllFinalizers();
  }

  /// Call all the registered listeners.
  ///
  /// Call this method whenever the object changes. Listeners that are added
  /// during this iteration will not be visited. Listeners that are removed
  /// during this iteration will not be visited after they are removed.
  @protected
  @visibleForTesting
  @pragma('vm:notify-debugger-on-exception')
  void notifyListeners() {
    assert(!_isDisposed, 'A $runtimeType was used after being disposed.');
    if (_count == 0) {
      return;
    }

    // To allow potential listeners to recursively call notifyListener, we track
    // the number of times this method is called in `_notificationCallStackDepth`.
    _notificationCallStackDepth++;

    final end = _count;
    for (var i = 0; i < end; i++) {
      final listenerRef = _listeners[i];
      try {
        // Also check if the listener was garbage collected mid-loop.
        listenerRef?.target?.call();
      } catch (exception, stack) {
        FlutterError.reportError(
          FlutterErrorDetails(
            exception: exception,
            stack: stack,
            library: 'df_pod',
            context: ErrorDescription('while dispatching notifications for $runtimeType'),
          ),
        );
      }
    }

    _notificationCallStackDepth--;

    if (_notificationCallStackDepth == 0) {
      // We really remove the listeners when all notifications are done.
      _compactListeners();
    }
  }

  /// Grows the internal listeners list when it's full.
  void _growListenersList() {
    if (_count == 0) {
      _listeners = List<WeakReference<VoidCallback>?>.filled(1, null);
    } else {
      final newListeners = List<WeakReference<VoidCallback>?>.filled(_listeners.length * 2, null);
      for (var i = 0; i < _count; i++) {
        newListeners[i] = _listeners[i];
      }
      _listeners = newListeners;
    }
  }

  /// Removes a listener at a specific index and compacts the list.
  void _removeAt(int index) {
    _count--;
    // Shrink the list if it's sparsely populated to conserve memory.
    if (_count * 2 <= _listeners.length) {
      final newListeners = List<WeakReference<VoidCallback>?>.filled(_count, null);
      for (var i = 0; i < index; i++) {
        newListeners[i] = _listeners[i];
      }
      for (var i = index; i < _count; i++) {
        newListeners[i] = _listeners[i + 1];
      }
      _listeners = newListeners;
    } else {
      // Otherwise, just shift elements in the existing list.
      for (var i = index; i < _count; i++) {
        _listeners[i] = _listeners[i + 1];
      }
      _listeners[_count] = null;
    }
  }

  /// Compacts the list by removing all null or dead references.
  /// This is called after notifications are complete.
  void _compactListeners() {
    // First, scan for any garbage-collected listeners and mark them for removal.
    for (var i = 0; i < _count; i++) {
      if (_listeners[i]?.target == null) {
        _listeners[i] = null;
        _reentrantlyRemovedListeners++;
      }
    }

    if (_reentrantlyRemovedListeners > 0) {
      final newLength = _count - _reentrantlyRemovedListeners;
      if (newLength * 2 <= _listeners.length) {
        // As in _removeAt, we only shrink the list when the real number of
        // listeners is half the length of our list.
        final newListeners = List<WeakReference<VoidCallback>?>.filled(newLength, null);
        var newIndex = 0;
        for (var i = 0; i < _count; i++) {
          final listenerRef = _listeners[i];
          if (listenerRef != null) {
            newListeners[newIndex++] = listenerRef;
          }
        }
        _listeners = newListeners;
      } else {
        // Otherwise we put all the null references at the end by compacting in-place.
        var writeIndex = 0;
        for (var readIndex = 0; readIndex < _count; readIndex++) {
          final listenerRef = _listeners[readIndex];
          if (listenerRef != null) {
            if (writeIndex != readIndex) {
              _listeners[writeIndex] = listenerRef;
            }
            writeIndex++;
          }
        }
        for (var i = newLength; i < _count; i++) {
          _listeners[i] = null;
        }
      }

      _reentrantlyRemovedListeners = 0;
      _count = newLength;
    }
  }

  void _attachFinalizer(VoidCallback listener) {
    if (printGarbageCollectionStatus && kDebugMode) {
      _debugFinalizers ??= [];
      final finalizer = Finalizer<VoidCallback>((_) {
        if (kDebugMode && !_isDisposed) {
          Log.alert(
            'A listener has been garbage collected. This is often desired, but ensure it was not due to a programming error where the listener was not held with a strong reference.',
            {#df_pod},
          );
        }
      });
      finalizer.attach(listener, listener, detach: this);
      _debugFinalizers!.add(finalizer);
      _debugFinalizersAttached = true;
    }
  }

  void _detachAllFinalizers() {
    if (_debugFinalizersAttached) {
      _debugFinalizers?.forEach((f) => f.detach(this));
      _debugFinalizers = null;
      _debugFinalizersAttached = false;
    }
  }
}

// OLDER VERSION:

// //.title
// // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
// //
// // Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// // source code is governed by an MIT-style license described in the LICENSE
// // file located in this project's root directory.
// //
// // See: https://opensource.org/license/mit
// //
// // ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
// //.title~

// import 'package:flutter/foundation.dart';

// // ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

// /// A modified version of [ChangeNotifier] that uses [WeakReference] for its
// /// listeners.
// mixin class WeakChangeNotifier implements Listenable {
//   //
//   //
//   //

//   int _count = 0;
//   List<WeakReference<VoidCallback>?> _listeners = _emptyListeners;
//   static final _emptyListeners = List<WeakReference<VoidCallback>?>.filled(
//     0,
//     null,
//   );
//   int _notificationCallStackDepth = 0;
//   int _reentrantlyRemovedListeners = 0;

//   //
//   //
//   //

//   static bool printGarbageCollectionStatus = false;
//   List<Finalizer<VoidCallback>>? _debugFinalizers;

//   //
//   //
//   //

//   bool get hasListeners => _count > 0;

//   //
//   //
//   //

//   /// Registers a listener that will be called only once when the object
//   /// notifies its listeners. After the listener is called, it is automatically
//   /// removed.
//   void addSingleExecutionListener(VoidCallback listener) {
//     late final VoidCallback tempListener;
//     tempListener = () {
//       listener();
//       removeListener(tempListener);
//     };
//     // ignore: deprecated_member_use_from_same_package
//     addListener(tempListener);
//   }

//   /// Register a closure to be called when the object notifies its listeners.
//   ///
//   /// The listener must be strongly referenced, meaning it should be stored in
//   /// an instance variable or field. If not, it will be garbage collected
//   /// prematurely.
//   ///
//   /// **For example:**
//   ///
//   /// ```dart
//   ///
//   /// // 👍 CORRECT - Instance functions are strongly referenced:
//   ///
//   /// final listener = () {
//   ///   print('Pod value changed');
//   /// };
//   /// weakChangeNotifier.addStrongRefListener(strongRefListener: listener);
//   ///
//   /// // ❌ INCORRECT - Functions defined like this are not strongly referenced:
//   ///
//   /// void listener() {
//   ///   print('Pod value changed');
//   /// }
//   ///
//   /// weakChangeNotifier.addStrongRefListener(strongRefListener: listener);
//   ///
//   /// // ❌ INCORRECT - Anonymous functions are not strongly referenced:
//   ///
//   /// weakChangeNotifier.addStrongRefListener(strongRefListener: () {
//   ///  print('Pod value changed');
//   /// });
//   @visibleForTesting
//   void addStrongRefListener({required VoidCallback strongRefListener}) {
//     // ignore: deprecated_member_use_from_same_package
//     addListener(strongRefListener);
//   }

//   /// ❌ Do not use this method directly. Use [addStrongRefListener] instead.
//   @Deprecated(
//     'Do not use this method directly. Use [addStrongRefListener] instead',
//   )
//   @protected
//   @override
//   void addListener(VoidCallback listener) {
//     _garbageCollect();
//     _maybeReallocate();
//     _listeners[_count++] = WeakReference(listener);
//     if (printGarbageCollectionStatus && kDebugMode) {
//       _debugFinalizers ??= [];
//       (_debugFinalizers ??= [])
//         ..add(
//           Finalizer<VoidCallback>((target) {
//             if (kDebugMode) {
//               print(
//                 '[$WeakChangeNotifier] A listener of type "$runtimeType" has been garbage collected.',
//               );
//             }
//           }),
//         )
//         ..last.attach(listener, () {});
//     }
//   }

//   void _maybeReallocate() {
//     if (_listeners.length == _count) {
//       if (_count == 0) {
//         _listeners = List<WeakReference<VoidCallback>?>.filled(1, null);
//       } else {
//         final newListeners = List<WeakReference<VoidCallback>?>.filled(
//           _listeners.length * 2,
//           null,
//         );
//         for (var i = 0; i < _count; i++) {
//           newListeners[i] = _listeners[i];
//         }
//         _listeners = newListeners;
//       }
//     }
//   }

//   //
//   //
//   //

//   @override
//   void removeListener(VoidCallback listener) {
//     for (var i = 0; i < _count; i++) {
//       final listenerAtIndex = _listeners[i];
//       final target = listenerAtIndex?.target;
//       // Remove the matching listener as well as weak references that no longer
//       // point to listeners, same as _garbageCollect().
//       if (target == listener || (target == null && listenerAtIndex != null)) {
//         if (_notificationCallStackDepth > 0) {
//           _listeners[i] = null;
//           _reentrantlyRemovedListeners++;
//         } else {
//           _removeAt(i);
//         }
//         break;
//       }
//     }
//   }

//   void _garbageCollect() {
//     for (var i = 0; i < _count; i++) {
//       final listenerAtIndex = _listeners[i];
//       final target = listenerAtIndex?.target;
//       if (target == null && listenerAtIndex != null) {
//         if (_notificationCallStackDepth > 0) {
//           _listeners[i] = null;
//           _reentrantlyRemovedListeners++;
//         } else {
//           _removeAt(i);
//         }
//         break;
//       }
//     }
//   }

//   void _removeAt(int index) {
//     _count -= 1;
//     if (_count * 2 <= _listeners.length) {
//       final newListeners = List<WeakReference<VoidCallback>?>.filled(
//         _count,
//         null,
//       );
//       for (var i = 0; i < index; i++) {
//         newListeners[i] = _listeners[i];
//       }
//       for (var i = index; i < _count; i++) {
//         newListeners[i] = _listeners[i + 1];
//       }
//       _listeners = newListeners;
//     } else {
//       for (var i = index; i < _count; i++) {
//         _listeners[i] = _listeners[i + 1];
//       }
//       _listeners[_count] = null;
//     }
//   }

//   //
//   //
//   //

//   @mustCallSuper
//   void dispose() {
//     _listeners = _emptyListeners;
//     _count = 0;
//   }

//   //
//   //
//   //

//   @pragma('vm:notify-debugger-on-exception')
//   void notifyListeners() {
//     _garbageCollect();

//     if (_count == 0) {
//       return;
//     }

//     // Call all listeners anc calculate the call stack depth, in case of
//     // recursive calling.
//     _notificationCallStackDepth++;
//     final end = _count;
//     for (var i = 0; i < end; i++) {
//       try {
//         _listeners[i]?.target?.call();
//       } catch (exception, stack) {
//         FlutterError.reportError(
//           FlutterErrorDetails(
//             exception: exception,
//             stack: stack,
//             library: 'df_pod',
//             context: ErrorDescription(
//               'while dispatching notifications for $runtimeType',
//             ),
//             informationCollector: () => <DiagnosticsNode>[
//               DiagnosticsProperty<WeakChangeNotifier>(
//                 'The $runtimeType sending notification was',
//                 this,
//                 style: DiagnosticsTreeStyle.errorProperty,
//               ),
//             ],
//           ),
//         );
//       }
//     }
//     _notificationCallStackDepth--;

//     // Remove listeners scheduled for removal by [removeListener].
//     if (_notificationCallStackDepth == 0 && _reentrantlyRemovedListeners > 0) {
//       final newLength = _count - _reentrantlyRemovedListeners;
//       if (newLength * 2 <= _listeners.length) {
//         final newListeners = List<WeakReference<VoidCallback>?>.filled(
//           newLength,
//           null,
//         );
//         var newIndex = 0;
//         for (var i = 0; i < _count; i++) {
//           final listener = _listeners[i];
//           if (listener != null) {
//             newListeners[newIndex++] = listener;
//           }
//         }
//         _listeners = newListeners;
//       } else {
//         for (var i = 0; i < newLength; i += 1) {
//           if (_listeners[i] == null) {
//             var swapIndex = i + 1;
//             while (_listeners[swapIndex] == null) {
//               swapIndex += 1;
//             }
//             _listeners[i] = _listeners[swapIndex];
//             _listeners[swapIndex] = null;
//           }
//         }
//       }
//       _reentrantlyRemovedListeners = 0;
//       _count = newLength;
//     }
//   }
// }

// Source: ./lib/src/pods/core/core.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:async';

// import 'package:df_safer_dart/df_safer_dart.dart';
// import 'package:df_type/df_type.dart';
// import 'package:flutter/foundation.dart';
// import 'package:flutter/widgets.dart' show WidgetsBinding;
// import 'package:shared_preferences/shared_preferences.dart';

// import '/src/_mixins/protected_pod_mixin.dart';
// import '/src/_src.g.dart';

// part '_child_pod_base.dart';
// part '_child_pod.dart';
// part '_generic_pod_mixin.dart';
// part '_pod_notifier.dart';
// part '_reducer_pod.dart';
// part '_root_pod.dart';
// part '_shared_pod.dart';

// part '_reducers/multiple_pod_reducer.dart';
// part '_reducers/pod_reducer_1.dart';
// part '_reducers/pod_reducer_2.dart';
// part '_reducers/pod_reducer_3.dart';
// part '_reducers/pod_reducer_4.dart';
// part '_reducers/pod_reducer_5.dart';
// part '_reducers/pod_reducer_6.dart';
// part '_reducers/pod_reducer_7.dart';

// Source: ./lib/src/pods/core/_root_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// An alias for [Pod].
typedef Pod<T extends Object> = RootPod<T>;

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A Pod that serves as the root of a Pod parent-child chain.
base class RootPod<T extends Object> extends PodNotifier<T> with GenericPod<T> {
  //
  //
  //

  @override
  @protected
  // ignore: overridden_fields
  T value;

  RootPod(this.value);

  /// Returns the current value of the Pod and calls [refresh]
  T get updateValue {
    this.refresh();
    return value;
  }

  /// Sets the value of the Pod to [newValue] and calls [notifyListeners] if
  /// the value is different from the current value.
  void set(
    T newValue, {
    bool notifyImmediately = true,
  }) {
    _set(
      newValue,
      notifyImmediately: notifyImmediately,
    );
  }

  /// Updates the current value of the Pod via [updateValue] and calls
  /// [notifyListeners] if the returned value is different from the current
  /// value.
  void update(
    T Function(T oldValue) updateValue, {
    bool notifyImmediately = true,
  }) {
    final newValue = updateValue(value);
    _set(
      newValue,
      notifyImmediately: notifyImmediately,
    );
  }

  /// Triggers [notifyListeners] after a zero-duration delay.
  void refresh() {
    Future.delayed(Duration.zero, notifyListeners);
  }
}

// Source: ./lib/src/pods/core/_reducer_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A Pod that listens to changes to existing Pods returned by the [responder].
/// When any of these returned Pods update, it recalculates its value using the
/// [reducer] function, then calls the [responder] again to refresh Pods to
/// listen to. This recursive behaviour ensures that the Pod continuously
/// listens to new changes from any updated Pods.
///
/// [T] is the type of this Pod and the value produced by the [reducer]
/// function.
///
/// Note that when this pod disposes via [dispose], it will not dispose the Pods
/// provided by [responder]. Explicit disposal is needed.
base class ReducerPod<T extends Object> extends PodNotifier<T> with GenericPod<T> {
  //
  //
  //

  /// Produces a list of Pods to listen to. This gets called recursively each
  /// time any of the Pods in the returned list change.
  final Iterable<Option<ValueListenable<Object>>> Function() responder;

  /// Reduces the values of the current Pods returned by [responder] to a
  /// single value of type [T], to update this Pod's [value].
  final T Function(List<Object> values) reducer;

  //
  //
  //

  factory ReducerPod.single(Option<ValueListenable<T>> Function() responder) {
    return ReducerPod(
      responder: () => [responder()],
      reducer: (values) => values.first as T,
    );
  }

  //
  //
  //

  @override
  // ignore: overridden_fields
  late T value;

  ReducerPod({
    required this.responder,
    required this.reducer,
  }) {
    _refresh!();
  }

  //
  //
  //

  late VoidCallback? _refresh = () => _set(_getValue());

  //
  //
  //

  final _listenables = <ValueListenable<Object>>[];
  T _getValue() {
    for (final listenable in _listenables) {
      listenable.removeListener(_refresh!);
    }
    final values = responder().toList();
    for (var n = 0; n < values.length; n++) {
      final option = values[n];
      if (option.isNone()) continue;
      final value = option.unwrap();
      _listenables.add(value);
      value.addListener(_refresh!);
    }
    final valuesToReduce = values.map((e) => e.map((e) => e.value)).toList();
    return reducer(valuesToReduce);
  }

  //
  //
  //

  @override
  void dispose() {
    super.dispose();
    for (final listenable in _listenables) {
      listenable.removeListener(_refresh!);
    }
    _refresh = null;
  }
}

// Source: ./lib/src/pods/core/_generic_pod_mixin.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// An alias for [GenericPod].
typedef GenericPod<T extends Object> = GenericPodMixin<T>;

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A mixin for managing [RootPod] and [ChildPod].
mixin GenericPodMixin<T extends Object> on PodNotifier<T>, ValueListenable<T> {
  //
  //
  //

  /// Returns the value of the Pod when the [test] returns `true`.
  Resolvable<T> cond(bool Function(T value) test) {
    final finisher = SafeFinisher<T>();
    final check = () {
      if (test(value)) {
        finisher.finish(value);
      }
    };
    check();
    if (finisher.isCompleted) {
      return SyncOk.value(value);
    } else {
      addStrongRefListener(strongRefListener: check);
      return finisher.resolvable().map((e) {
        removeListener(check);
        return e;
      });
    }
  }

  final _children = <_ChildPodBase<Object, Object>>{};

  void _addChild(_ChildPodBase<Object, Object> child) {
    if (!_children.contains(child)) {
      // ignore: invalid_use_of_visible_for_testing_member
      addStrongRefListener(strongRefListener: child._refresh);
      _children.add(child);
    }
  }

  void _removeChild(_ChildPodBase<Object, Object> child) {
    final didRemove = _children.remove(child);
    if (didRemove) {
      removeListener(child._refresh);
    }
  }

  bool _set(
    T newValue, {
    bool notifyImmediately = true,
  }) {
    if (!isEquatable<T>() || newValue != value) {
      value = newValue;
      if (notifyImmediately) {
        notifyListeners();
      } else {
        // Avoid "setState() or markNeedsBuild() called during build" warning.
        WidgetsBinding.instance.addPostFrameCallback((_) {
          if (!isDisposed) {
            notifyListeners();
          }
        });
      }
      return true;
    }
    return false;
  }

  /// Reduces the current Pod and [other] into a single [ChildPod].
  ChildPod<Object, C> reduce<C extends Object, O extends Object>(
    GenericPod<O> other,
    TReducerFn2<C, T, O> reducer,
  ) {
    return PodReducer2.reduce<C, T, O>(
      () => (this, other),
      (a, b) => reducer(a, b),
    );
  }

  /// Maps `this` [GenericPod] to a new [ChildPod] using the specified [reducer].
  ChildPod<T, B> map<B extends Object>(B Function(T value) reducer) {
    return ChildPod<T, B>._(
      responder: () => [this],
      reducer: (_) => reducer(value),
    );
  }

  /// Disposes all children before disposing `this`.
  @override
  void dispose() {
    this.disposeChildren();
    super.dispose();
  }

  /// Disposes and removes all children.
  @protected
  void disposeChildren() {
    // Copy the set to prevent concurrent modification issues during iteration.
    final copy = Set.of(_children);
    for (final child in copy) {
      child.dispose();
      _removeChild(child);
    }
  }
}

// Source: ./lib/src/pods/core/_reducers/pod_reducer_7.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 7 Pods.
final class PodReducer7 {
  PodReducer7._();

  /// Reduces 7 Pods into a [ChildPod].
  static ChildPod<Object, C> reduce<
      C extends Object,
      P1 extends Object,
      P2 extends Object,
      P3 extends Object,
      P4 extends Object,
      P5 extends Object,
      P6 extends Object,
      P7 extends Object>(
    TResponderFn7<P1, P2, P3, P4, P5, P6, P7> responder,
    TReducerFn7<C, P1, P2, P3, P4, P5, P6, P7> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod<Object>> _toList<P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object, P5 extends Object, P6 extends Object, P7 extends Object>(
    TResponderFn7<P1, P2, P3, P4, P5, P6, P7> responder,
  ) {
    final response = responder.call();
    return [
      response.$1,
      response.$2,
      response.$3,
      response.$4,
      response.$5,
      response.$6,
      response.$7,
    ];
  }

  /// Reduces the values from 7 Pods using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object, P5 extends Object, P6 extends Object, P7 extends Object>(
    TResponderFn7<P1, P2, P3, P4, P5, P6, P7> responder,
    TReducerFn7<C, P1, P2, P3, P4, P5, P6, P7> reducer,
  ) {
    final response = responder();
    return reducer(
      response.$1,
      response.$2,
      response.$3,
      response.$4,
      response.$5,
      response.$6,
      response.$7,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn7<P1 extends Object, P2 extends Object, P3 extends Object, P4 extends Object,
        P5 extends Object, P6 extends Object, P7 extends Object>
    = (
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
  GenericPod<P5> p5,
  GenericPod<P6> p6,
  GenericPod<P7> p7,
)
        Function();

typedef TReducerFn7<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
        P4 extends Object, P5 extends Object, P6 extends Object, P7 extends Object>
    = C Function(
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
  GenericPod<P5> p5,
  GenericPod<P6> p6,
  GenericPod<P7> p7,
);

// Source: ./lib/src/pods/core/_reducers/multiple_pod_reducer.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A final class to handle reducing operations for many Pods.
final class MultiplePodReducer {
  MultiplePodReducer._();

  /// Reduces multiple Pods into a [ChildPod].
  static ChildPod<T1, T2> reduce<T1 extends Object, T2 extends Object>(
    Iterable<GenericPod<T1>> Function() responder,
    T2 Function(Iterable<GenericPod<T1>> values) reducer,
  ) {
    return ChildPod<T1, T2>._(
      responder: responder,
      reducer: (_) {
        final response = responder();
        return reducer(response);
      },
    );
  }
}

// Source: ./lib/src/pods/core/_reducers/pod_reducer_6.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 6 Pods.
final class PodReducer6 {
  PodReducer6._();

  /// Reduces 6 Pods into a [ChildPod].
  static ChildPod<Object, C> reduce<C extends Object, P1 extends Object, P2 extends Object,
      P3 extends Object, P4 extends Object, P5 extends Object, P6 extends Object>(
    TResponderFn6<P1, P2, P3, P4, P5, P6> responder,
    TReducerFn6<C, P1, P2, P3, P4, P5, P6> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod<Object>> _toList<P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object, P5 extends Object, P6 extends Object>(
    TResponderFn6<P1, P2, P3, P4, P5, P6> responder,
  ) {
    final response = responder.call();
    return [
      response.$1,
      response.$2,
      response.$3,
      response.$4,
      response.$5,
      response.$6,
    ];
  }

  /// Reduces the values from 6 Pods using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object, P5 extends Object, P6 extends Object>(
    TResponderFn6<P1, P2, P3, P4, P5, P6> responder,
    TReducerFn6<C, P1, P2, P3, P4, P5, P6> reducer,
  ) {
    final response = responder();
    return reducer(
      response.$1,
      response.$2,
      response.$3,
      response.$4,
      response.$5,
      response.$6,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn6<P1 extends Object, P2 extends Object, P3 extends Object, P4 extends Object,
        P5 extends Object, P6 extends Object>
    = (
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
  GenericPod<P5> p5,
  GenericPod<P6> p6,
)
        Function();

typedef TReducerFn6<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
        P4 extends Object, P5 extends Object, P6 extends Object>
    = C Function(
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
  GenericPod<P5> p5,
  GenericPod<P6> p6,
);

// Source: ./lib/src/pods/core/_reducers/pod_reducer_1.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 1 Pod.
final class PodReducer1 {
  PodReducer1._();

  /// Reduces 1 Pod into a [ChildPod].
  static ChildPod<Object, C> reduce<C extends Object, P1 extends Object>(
    TResponderFn1<P1> responder,
    TNullableReducerFn1<C, P1> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod> _toList<P1 extends Object>(TResponderFn1<P1> responder) {
    final response = responder.call();
    return [response.$1];
  }

  /// Reduces the values from 1 Pod using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object>(
    TResponderFn1<P1> responder,
    TNullableReducerFn1<C, P1> reducer,
  ) {
    final response = responder();
    return reducer(response.$1);
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn1<P1 extends Object> = (GenericPod<P1> p1,) Function();

typedef TNullableReducerFn1<C extends Object, P1 extends Object> = C Function(GenericPod<P1> p1);

typedef TReducerFn1<C extends Object, P1 extends Object> = C Function(GenericPod<P1> p1);

// Source: ./lib/src/pods/core/_reducers/pod_reducer_3.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 3 Pods.
final class PodReducer3 {
  PodReducer3._();

  /// Reduces 3 Pods into a [ChildPod].
  static ChildPod<Object, C>
      reduce<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object>(
    TResponderFn3<P1, P2, P3> responder,
    TReducerFn3<C, P1, P2, P3> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod<Object>> _toList<P1 extends Object, P2 extends Object, P3 extends Object>(
    TResponderFn3<P1, P2, P3> responder,
  ) {
    final response = responder.call();
    return [response.$1, response.$2, response.$3];
  }

  /// Reduces the values from 3 Pods using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object>(
    TResponderFn3<P1, P2, P3> responder,
    TReducerFn3<C, P1, P2, P3> reducer,
  ) {
    final response = responder();
    return reducer(response.$1, response.$2, response.$3);
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn3<P1 extends Object, P2 extends Object, P3 extends Object>
    = (GenericPod<P1> p1, GenericPod<P2> p2, GenericPod<P3> p3) Function();

typedef TReducerFn3<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object> = C
    Function(GenericPod<P1> p1, GenericPod<P2> p2, GenericPod<P3> p3);

// Source: ./lib/src/pods/core/_reducers/pod_reducer_2.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 2 Pods.
final class PodReducer2 {
  PodReducer2._();

  /// Reduces 2 Pods into a [ChildPod].
  static ChildPod<Object, C> reduce<C extends Object, P1 extends Object, P2 extends Object>(
    TResponderFn2<P1, P2> responder,
    TNullableReducerFn2<C, P1, P2> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod> _toList<P1 extends Object, P2 extends Object>(
    TResponderFn2<P1, P2> responder,
  ) {
    final response = responder.call();
    return [response.$1, response.$2];
  }

  /// Reduces the values from 2 Pods using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object, P2 extends Object>(
    TResponderFn2<P1, P2> responder,
    TNullableReducerFn2<C, P1, P2> reducer,
  ) {
    final response = responder();
    return reducer(response.$1, response.$2);
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn2<P1 extends Object, P2 extends Object> = (GenericPod<P1> p1, GenericPod<P2> p2)
    Function();

typedef TNullableReducerFn2<C extends Object, P1 extends Object, P2 extends Object> = C Function(
  GenericPod<P1> p1,
  GenericPod<P2> p2,
);

typedef TReducerFn2<C extends Object, P1 extends Object, P2 extends Object> = C Function(
  GenericPod<P1> p1,
  GenericPod<P2> p2,
);

// Source: ./lib/src/pods/core/_reducers/pod_reducer_5.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 5 Pods.
final class PodReducer5 {
  PodReducer5._();

  /// Reduces 5 Pods into a [ChildPod].
  static ChildPod<Object, C> reduce<C extends Object, P1 extends Object, P2 extends Object,
      P3 extends Object, P4 extends Object, P5 extends Object>(
    TResponderFn5<P1, P2, P3, P4, P5> responder,
    TReducerFn5<C, P1, P2, P3, P4, P5> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod<Object>> _toList<P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object, P5 extends Object>(
    TResponderFn5<P1, P2, P3, P4, P5> responder,
  ) {
    final response = responder.call();
    return [response.$1, response.$2, response.$3, response.$4, response.$5];
  }

  /// Reduces the values from 5 Pods using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object, P5 extends Object>(
    TResponderFn5<P1, P2, P3, P4, P5> responder,
    TReducerFn5<C, P1, P2, P3, P4, P5> reducer,
  ) {
    final response = responder();
    return reducer(
      response.$1,
      response.$2,
      response.$3,
      response.$4,
      response.$5,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn5<P1 extends Object, P2 extends Object, P3 extends Object, P4 extends Object,
        P5 extends Object>
    = (
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
  GenericPod<P5> p5,
)
        Function();

typedef TReducerFn5<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
        P4 extends Object, P5 extends Object>
    = C Function(
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
  GenericPod<P5> p5,
);

// Source: ./lib/src/pods/core/_reducers/pod_reducer_4.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of '../core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A class to handle reducing operations for 4 Pods.
final class PodReducer4 {
  PodReducer4._();

  /// Reduces 4 Pods into a [ChildPod].
  static ChildPod<Object, C> reduce<C extends Object, P1 extends Object, P2 extends Object,
      P3 extends Object, P4 extends Object>(
    TResponderFn4<P1, P2, P3, P4> responder,
    TReducerFn4<C, P1, P2, P3, P4> reducer,
  ) {
    return ChildPod<Object, C>._(
      responder: () => _toList(responder),
      reducer: (_) => _reduce(responder, reducer),
    );
  }

  /// Converts the response from the responder function into a list of Pods.
  static List<GenericPod<Object>>
      _toList<P1 extends Object, P2 extends Object, P3 extends Object, P4 extends Object>(
    TResponderFn4<P1, P2, P3, P4> responder,
  ) {
    final response = responder.call();
    return [response.$1, response.$2, response.$3, response.$4];
  }

  /// Reduces the values from 4 Pods using the provided reducer function.
  static C _reduce<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
      P4 extends Object>(
    TResponderFn4<P1, P2, P3, P4> responder,
    TReducerFn4<C, P1, P2, P3, P4> reducer,
  ) {
    final response = responder();
    return reducer(response.$1, response.$2, response.$3, response.$4);
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TResponderFn4<P1 extends Object, P2 extends Object, P3 extends Object, P4 extends Object>
    = (
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
)
        Function();

typedef TReducerFn4<C extends Object, P1 extends Object, P2 extends Object, P3 extends Object,
        P4 extends Object>
    = C Function(
  GenericPod<P1> p1,
  GenericPod<P2> p2,
  GenericPod<P3> p3,
  GenericPod<P4> p4,
);

// Source: ./lib/src/pods/core/_pod_notifier.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// An enhanced alternative to [ValueNotifier] that provides additional
/// lifecycle management capabilities through the [ValueListenable].
abstract class PodNotifier<T extends Object> extends DisposablePod<T> {
  //
  //
  //

  @override
  @protected
  late T value;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TOnBeforeDispose<T> = void Function(T value)?;

// Source: ./lib/src/pods/core/_child_pod_base.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract base class _ChildPodBase<TParent extends Object, TChild extends Object>
    extends PodNotifier<TChild> with GenericPod<TChild>, ProtectedPodMixin<TChild> {
  //
  //
  //

  final TPodsResponderFn<TParent> _responder;
  final TValuesReducerFn<TChild, TParent> _reducer;
  late Iterable<GenericPod<TParent>?> _parents;

  @override
  // ignore: overridden_fields
  late TChild value;

  //
  //
  //

  _ChildPodBase({
    required TPodsResponderFn<TParent> responder,
    required TValuesReducerFn<TChild, TParent> reducer,
    required TChild initialValue,
  })  : _reducer = reducer,
        _responder = responder {
    value = initialValue;
  }

  //
  //
  //

  void _initializeParents(Iterable<GenericPod<TParent>> parents) {
    for (var parent in parents) {
      parent._addChild(this);
    }
  }

  //
  //
  //

  @visibleForTesting
  Iterable<GenericPod<TParent>?> get parents => _parents;

  //
  //
  //

  bool _isDirty = false;

  late final VoidCallback _refresh = () {
    // Already scheduled for a refresh.
    if (_isDirty) return;
    _isDirty = true;

    // Get the new parents.
    final newParents = _responder();

    // Unsubscribe from any Pods that are no longer parents.
    final oldParentsSet = _parents.nonNulls.toSet();
    final newParentsSet = newParents.nonNulls.toSet();
    for (final oldParent in oldParentsSet.difference(newParentsSet)) {
      oldParent._removeChild(this);
    }

    // Subscribe to new parents.
    _initializeParents(newParents);
    _parents = newParents;

    // Recalculate the value
    final newValue = _reducer(newParents.map((p) => p.value).toList());
    _set(newValue);

    // Reset the flag.
    _isDirty = false;
  };

  //
  //
  //

  @override
  void dispose() {
    for (var parent in _parents) {
      parent?._removeChild(this);
    }
    super.dispose();
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TValuesReducerFn<TChild, TParentList> = TChild Function(List<TParentList?> parentValues);

typedef TPodsResponderFn<T extends Object> = Iterable<GenericPod<T>> Function();

// Source: ./lib/src/pods/core/_child_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A Pod that derives its value from parent Pods using a specified reducer
/// function, updating when any of its parent Pods change.
final class ChildPod<TParent extends Object, TChild extends Object>
    extends _ChildPodBase<TParent, TChild> with ProtectedPodMixin {
  //
  //
  //

  factory ChildPod._({
    required TPodsResponderFn<TParent> responder,
    required TValuesReducerFn<TChild, TParent> reducer,
  }) {
    final parents = responder();
    final initialValue = reducer(parents.map((p) => p.value).toList());
    final temp = ChildPod._internal(
      responder: responder,
      reducer: reducer,
      initialValue: initialValue,
    );
    temp._initializeParents(parents);
    return temp;
  }

  //
  //
  //

  ChildPod._internal({
    required super.responder,
    required super.reducer,
    required super.initialValue,
  }) : super();
}

// Source: ./lib/src/pods/core/_shared_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// part of 'core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

base class SharedPod<A extends Object, B extends Object> extends RootPod<A> {
  //
  //
  //

  SharedPreferences? _sharedPreferences;

  //
  //
  //

  final String key;
  final A Function(B? rawValue) fromValue;
  final B Function(A value) toValue;
  final A initialValue;

  //
  //
  //

  @protected
  SharedPod(
    this.key, {
    required this.fromValue,
    required this.toValue,
    required this.initialValue,
  }) : super(initialValue);

  //
  //
  //

  /// Creates and initializes a [SharedPod] by loading its value from storage.
  static Future<SharedPod<A, B>> create<A extends Object, B extends Object>(
    String key, {
    required A Function(B? rawValue) fromValue,
    required B Function(A value) toValue,
    required A initialValue,
  }) async {
    final instance = SharedPod<A, B>(
      key,
      fromValue: fromValue,
      toValue: toValue,
      initialValue: initialValue,
    );
    await instance.refresh();
    return instance;
  }

  //
  //
  //

  @override
  Future<void> set(
    A newValue, {
    bool notifyImmediately = true,
  }) async {
    final v = toValue(newValue);
    _sharedPreferences ??= await SharedPreferences.getInstance();
    switch (v) {
      case final String s:
        await _sharedPreferences!.setString(key, s);
      case final bool b:
        await _sharedPreferences!.setBool(key, b);
      case final int i:
        await _sharedPreferences!.setInt(key, i);
      case final double d:
        await _sharedPreferences!.setDouble(key, d);
      case final Iterable<String> list:
        await _sharedPreferences!.setStringList(key, list.toList());
      default:
        throw Err(
          'SharedPod only supports storing String, int, bool, double, and Iterable<String>. '
          'The provided value type is ${v.runtimeType}.',
        );
    }
    _set(
      newValue,
      notifyImmediately: notifyImmediately,
    );
  }

  //
  //
  //

  Future<void> delete({
    bool notifyImmediately = true,
  }) async {
    _sharedPreferences ??= await SharedPreferences.getInstance();
    await _sharedPreferences!.remove(key);
    _set(
      initialValue,
      notifyImmediately: notifyImmediately,
    );
  }

  //
  //
  //

  @override
  Future<void> refresh({
    bool notifyImmediately = true,
  }) async {
    _sharedPreferences ??= await SharedPreferences.getInstance();
    final v = _sharedPreferences!.get(key);
    final newValue = fromValue(v as B?);
    _set(
      newValue,
      notifyImmediately: notifyImmediately,
    );
  }
}

// Source: ./lib/src/pods/more_shared_pods/shared_bool_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedBoolPodCreator {
  const SharedBoolPodCreator._();

  static Future<TSharedBoolPod> create(String key, {bool? initialValue}) {
    // Provide a non-nullable default for the required `initialValue`.
    final finalInitialValue = initialValue ?? false;

    return TSharedBoolPod.create(
      key,
      // If storage is null, return the default value.
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }

  static Async<TSharedProtectedBoolPod> protected(
    String key, {
    bool? initialValue,
  }) {
    // Provide a non-nullable default for the required `initialValue`.
    final finalInitialValue = initialValue ?? false;
    return TSharedProtectedBoolPod.create(
      key,
      // If storage is null, return the default value.
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedBoolPod = SharedPod<bool, bool>;
typedef TSharedProtectedBoolPod = SharedProtectedPod<bool, bool>;

// Source: ./lib/src/pods/more_shared_pods/shared_json_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:convert';
// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedJsonPodCreator {
  const SharedJsonPodCreator._();
  static Future<TSharedJsonPod> create(
    String key, {
    Map<String, Object>? initialValue,
  }) {
    final finalInitialValue = initialValue ?? const {};
    return TSharedJsonPod.create(
      key,
      fromValue: (rawValue) =>
          rawValue != null ? jsonDecode(rawValue) as Map<String, Object> : finalInitialValue,
      toValue: (value) => jsonEncode(value),
      initialValue: finalInitialValue,
    );
  }

  static Async<TSharedProtectedJsonPod> protected(
    String key, {
    Map<String, Object>? initialValue,
  }) {
    final finalInitialValue = initialValue ?? const {};
    return TSharedProtectedJsonPod.create(
      key,
      fromValue: (rawValue) =>
          rawValue != null ? jsonDecode(rawValue) as Map<String, Object> : finalInitialValue,
      toValue: (value) => jsonEncode(value),
      initialValue: finalInitialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedJsonPod = SharedPod<Map<String, Object>, String>;
typedef TSharedProtectedJsonPod = SharedProtectedPod<Map<String, Object>, String>;

// Source: ./lib/src/pods/more_shared_pods/shared_int_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedIntPodCreator {
  const SharedIntPodCreator._();
  static Future<TSharedIntPod> create(String key, {int? initialValue}) {
    final finalInitialValue = initialValue ?? 0;
    return TSharedIntPod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }

  static Async<TSharedProtectedIntPod> protected(
    String key, {
    int? initialValue,
  }) {
    final finalInitialValue = initialValue ?? 0;
    return TSharedProtectedIntPod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedIntPod = SharedPod<int, int>;
typedef TSharedProtectedIntPod = SharedProtectedPod<int, int>;

// Source: ./lib/src/pods/more_shared_pods/shared_double_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedDoublePodCreator {
  const SharedDoublePodCreator._();

  static Future<TSharedDoublePod> create(
    String key, {
    double? initialValue,
  }) {
    final finalInitialValue = initialValue ?? 0.0;
    return TSharedDoublePod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }

  static Async<TSharedProtectedDoublePod> protected(
    String key, {
    double? initialValue,
  }) {
    final finalInitialValue = initialValue ?? 0.0;
    return TSharedProtectedDoublePod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedDoublePod = SharedPod<double, double>;
typedef TSharedProtectedDoublePod = SharedProtectedPod<double, double>;

// Source: ./lib/src/pods/more_shared_pods/shared_enum_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedEnumPodCreator {
  const SharedEnumPodCreator._();

  /// Creates a pod that persists an enum value.
  ///
  /// Requires a non-nullable `initialValue` to ensure type safety, as there
  /// is no universal default for enums.
  static Future<TSharedEnumPod<T>> create<T extends Enum>(
    String key, {
    required Iterable<T> options,
    required T initialValue,
  }) {
    return TSharedEnumPod.create(
      key,
      fromValue: (rawValue) {
        if (rawValue == null) return initialValue;
        // Find the enum by its name, or fall back to the initialValue.
        return options.firstWhere(
          (e) => e.name.toLowerCase() == rawValue.toLowerCase(),
          orElse: () => initialValue,
        );
      },
      toValue: (value) => value.name,
      initialValue: initialValue,
    );
  }

  static Async<TSharedProtectedEnumPod<T>> protected<T extends Enum>(
    String key, {
    required Iterable<T> options,
    required T initialValue,
  }) {
    return TSharedProtectedEnumPod.create(
      key,
      fromValue: (rawValue) {
        if (rawValue == null) return initialValue;
        return options.firstWhere(
          (e) => e.name.toLowerCase() == rawValue.toLowerCase(),
          orElse: () => initialValue,
        );
      },
      toValue: (value) => value.name,
      initialValue: initialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedEnumPod<T extends Enum> = SharedPod<T, String>;
typedef TSharedProtectedEnumPod<T extends Enum> = SharedProtectedPod<T, String>;

// Source: ./lib/src/pods/more_shared_pods/shared_string_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedStringPodCreator {
  const SharedStringPodCreator._();
  static Future<TSharedStringPod> create(
    String key, {
    String? initialValue,
  }) {
    final finalInitialValue = initialValue ?? '';
    return TSharedStringPod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }

  static Async<TSharedProtectedPod> protected(
    String key, {
    String? initialValue,
  }) {
    final finalInitialValue = initialValue ?? '';
    return TSharedProtectedPod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedStringPod = SharedPod<String, String>;
typedef TSharedProtectedPod = SharedProtectedPod<String, String>;

// Source: ./lib/src/pods/more_shared_pods/shared_string_list_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class SharedStringListPodCreator {
  const SharedStringListPodCreator._();
  static Future<TSharedStringListPod> create(
    String key, {
    List<String>? initialValue,
  }) {
    final finalInitialValue = initialValue ?? const [];
    return TSharedStringListPod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }

  static Async<TSharedProtectedStringListPod> protected(
    String key, {
    List<String>? initialValue,
  }) {
    final finalInitialValue = initialValue ?? const [];
    return TSharedProtectedStringListPod.create(
      key,
      fromValue: (rawValue) => rawValue ?? finalInitialValue,
      toValue: (value) => value,
      initialValue: finalInitialValue,
    );
  }
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

typedef TSharedStringListPod = SharedPod<List<String>, List<String>>;
typedef TSharedProtectedStringListPod = SharedProtectedPod<List<String>, List<String>>;

// Source: ./lib/src/pods/shared_protected_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_safer_dart/df_safer_dart.dart' show Async;
// import 'package:meta/meta.dart' show protected;

// import '/src/_mixins/protected_pod_mixin.dart';
// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A [SharedPod] that protects [addStrongRefListener] and [dispose], hiding
/// these methods from external access to prevent misuse or unintended behavior.
///
/// This is useful when you want to restrict direct access to lifecycle
/// management methods of the Pod, ensuring that these operations are only
/// handled internally or through controlled mechanisms.
///
/// Extends [SharedPod] and uses [ProtectedPodMixin] to encapsulate and manage
/// the protection of these critical methods.
base class SharedProtectedPod<A extends Object, B extends Object> extends SharedPod<A, B>
    with ProtectedPodMixin {
  //
  //
  //

  @protected
  SharedProtectedPod(
    super.key, {
    required super.fromValue,
    required super.toValue,
    required super.initialValue,
  });

  //
  //
  //

  /// Creates and initializes a [SharedProtectedPod] by loading its value from storage.
  static Async<SharedProtectedPod<A, B>> create<A extends Object, B extends Object>(
    String key, {
    required A Function(B? rawValue) fromValue,
    required B Function(A value) toValue,
    required A initialValue,
  }) =>
      Async(() async {
        final instance = SharedProtectedPod<A, B>(
          key,
          fromValue: fromValue,
          toValue: toValue,
          initialValue: initialValue,
        );
        await instance.refresh();
        return instance;
      });
}

// Source: ./lib/src/pods/disposable_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'package:df_cleanup/df_cleanup.dart' show DisposeMixin, WillDisposeMixin;
// import 'package:df_log/df_log.dart' show Log;
// import 'package:df_safer_dart/df_safer_dart.dart';

// import 'package:flutter/foundation.dart';

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

abstract class DisposablePod<T extends Object> extends WeakChangeNotifier
    with DisposeMixin, WillDisposeMixin
    implements ValueListenable<T> {
  /// A flag indicating whether the Pod has been disposed.
  bool _isDisposed = false;

  /// Whether this [Pod] has been disposed of or not.
  @nonVirtual
  bool get isDisposed => this._isDisposed;

  /// ❌ Do not use this method directly. Use [addStrongRefListener] instead.
  @override
  @Deprecated(
    'Do not use this method directly. Use [addStrongRefListener] instead',
  )
  void addListener(VoidCallback listener) {
    if (!_isDisposed) {
      super.addListener(listener);
    } else {
      Log.alert('Tried to add a listener to a disposed Pod!', {#df_pod});
    }
  }

  @override
  void removeListener(VoidCallback listener) {
    if (!_isDisposed) {
      super.removeListener(listener);
    } else {
      Log.alert('Tried to remove a listener from a disposed Pod!', {#df_pod});
    }
  }

  /// Dipsoses this [ValueListenable] and sets [isDisposed] to `true`.
  /// Successive calls to this method will be ignored.
  @override
  @mustCallSuper
  void dispose() {
    if (!_isDisposed) {
      super.dispose();
      this._isDisposed = true;
    } else {
      Log.alert('Tried to dispose a Pod again!', {#df_pod});
    }
  }

  @pragma('vm:prefer-inline')
  Sync<DisposablePod<T>> asSync() => Sync.value(Ok(this));
}

// Source: ./lib/src/pods/protected_pod.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import '/src/_mixins/protected_pod_mixin.dart' show ProtectedPodMixin;

// import 'core/core.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A [RootPod] that protects [addStrongRefListener] and [dispose], hiding these
/// methods from external access to prevent misuse or unintended behavior.
///
/// This is useful when you want to restrict direct access to lifecycle
/// management methods of the Pod, ensuring that these operations are only
/// handled internally or through controlled mechanisms.
///
/// Extends [RootPod] and uses [ProtectedPodMixin] to encapsulate and manage
/// the protection of these critical methods.
base class ProtectedPod<T extends Object> extends RootPod<T> with ProtectedPodMixin<T> {
  ProtectedPod(super.value);
}

// Source: ./lib/src/_src.g.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

export 'builders/builder_snapshot.dart';
export 'builders/pod_builder.dart';
export 'builders/pod_list_builder.dart';
export 'builders/polling_pod_builder.dart';
export 'pods/core/core.dart';
export 'pods/disposable_pod.dart';
export 'pods/more_shared_pods/shared_bool_pod.dart';
export 'pods/more_shared_pods/shared_double_pod.dart';
export 'pods/more_shared_pods/shared_enum_pod.dart';
export 'pods/more_shared_pods/shared_int_pod.dart';
export 'pods/more_shared_pods/shared_json_pod.dart';
export 'pods/more_shared_pods/shared_string_list_pod.dart';
export 'pods/more_shared_pods/shared_string_pod.dart';
export 'pods/protected_pod.dart';
export 'pods/shared_protected_pod.dart';
export 'utils/weak_change_notifier.dart';
export 'utils/value_listenable_x.dart';

// Source: ./lib/src/_mixins/protected_pod_mixin.dart
//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// Dart/Flutter (DF) Packages by dev-cetera.com & contributors. The use of this
// source code is governed by an MIT-style license described in the LICENSE
// file located in this project's root directory.
//
// See: https://opensource.org/license/mit
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// import 'dart:ui' show VoidCallback;

// import 'package:meta/meta.dart';

// import '/src/_src.g.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

/// A mixin that protects [addStrongRefListener] and [dispose], hiding these
/// methods from external access to prevent misuse or unintended behavior.
///
/// This is useful when you want to restrict direct access to lifecycle
/// management methods of the Pod, ensuring that these operations are only
/// handled internally or through controlled mechanisms.
@internal
base mixin ProtectedPodMixin<T extends Object> on DisposablePod<T> {
  /// ❌ Do not add listeners to this Pod directly.
  @protected
  @override
  void addListener(VoidCallback listener) {
    // ignore: deprecated_member_use_from_same_package
    super.addListener(listener);
  }

  /// ❌ Do not add listeners to this Pod directly.
  @protected
  @override
  void addSingleExecutionListener(VoidCallback listener) {
    super.addSingleExecutionListener(listener);
  }

  /// ❌ Do not dispose this Pod directly.
  @protected
  @override
  void dispose() {
    super.dispose();
  }
}

